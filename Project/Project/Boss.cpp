#include "pch.h"
#include "Boss.h"


Boss::Boss()
{
	playerLevel = Player::getInstance()->GetLevel();
	RandomManager::GetInstance()->setRange(30, 40);
	double  Hp = double(playerLevel * RandomManager::GetInstance()->getRandom<int>()) + (8 * playerLevel);
	RandomManager::GetInstance()->setRange(7, 9);
	double  damage = double(playerLevel * RandomManager::GetInstance()->getRandom<int>()) + (3 * playerLevel);
	int		def = playerLevel * 1;
	//Ïù¥Î¶Ñ    hp  maxhp  damage   def  skd   eva drop exp  coin
	BossStat = { "üåàÎ†àÏù∏Î≥¥Ïö∞ ÎìúÎûòÍ≥§üêâ", Hp, Hp, damage, def, 1.4, 20, 30, 13, 20};
	dropItems[HEALTH_POTION] = BossStat.dropRate;
	dropItems[POWER_POTION] = BossStat.dropRate;
	bDead = false;
}

Boss::~Boss() {}

void Boss::Begin()
{
	CreateAnimations();
	Monster::animator->Play("Idle", true);
}

void Boss::Tick()
{
	Monster::Tick();
	//if (bDead == false && Monster::animator->isCurAnimEnd()) {
	//	//Monster::animator->Play("Idle", true);
	//}
}
void Boss::CreateAnimations()
{
	vector<string>VecAnim01;
	VecAnim01.push_back("");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ñ‚°Ä‚£†‚£∑‚£Ñ‚†Ñ‚†Ä‚†Ä‚†Ä‚¢†‚£ß‚°Ç‚†Ä‚†Ä‚†Ä ");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢¨‚£¶‚¢∂‚¢∑‚¢¶‚£ø‚°Ä‚°Ä‚°Ä‚†Ä‚†Ä‚°Ä‚£Ñ‚°æ‚°ü‚£ø‚£Ü‚¢ù‚¢ø‚£§‚£∑‚£ü‚¢ø‚£Ω‚°è‚†Ä‚†Ä‚†Ä‚†Ä");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£º‚†£‚£∑‚¢∑‚°ï‚°ç‚¢ø‚°û‚†Ñ‚†Ä‚¢†‚£ô‚¢ô‚£∑‚£µ‚°¢‚°õ‚£∑‚°ë‚£ø‚£™‚°ø‚†´‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†∫‚°Ø‚£ß‚†ø‚¢ª‚°é‚°é‚£ø‚†Ä‚¢Ä‚†à‚£Ω‚¢ü‚¢ï‚¢ç‚†ª‚°∑‚°ù‚°ü‚†º‚¢ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚°°‚£æ‚¢á‚¢á‚£ø‚†Ä‚†ê‚¢ª‚°æ‚°±‚°±‚£Ω‚¢£‚¢£‚¢£‚£ø‚£ª‚°é‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚£Ñ‚£∑‚¢ª‚¢±‚¢±‚£Ω‚†É‚†Ä‚†∞‚°º‚£ó‚¢ï‚¢ï‚¢Ω‚£á‚¢á‚¢á‚°ª‚°π‚°®‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚¢û‚¢è‚¢é‚¢é‚¢é‚£æ‚†ë‚†Ä‚†Ä‚¢Ä‚£à‚£ø‚°∏‚°∏‚°®‚£ø‚¢≥‚£ï‚¢ø‚°ú‚°å‚¢ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚††‚£Ω‚¢´‚¢™‚£™‚£Æ‚£Æ‚¢ø‚¢∑‚¢æ‚¢Æ‚£Æ‚£¨‚£ç‚¢Ω‚°é‚°é‚°é‚°û‚£Ø‚£∑‚£ù‚£∑‚¢±‚¢±‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚¢±‚°ü‚°û‚£ø‚£Ω‚£º‚¢æ‚†æ‚¢∑‚¢ª‚†∑‚†∑‚°∑‚°ø‚£ø‚£∑‚£ß‚°£‚°£‚£ª‚£ø‚£Ö‚†ª‚¢õ‚†´‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚¢∏‚£á‚¢á‚¢≤‚£ø‚£ú‚£ú‚¢ú‚†µ‚°ü‚°ü‚°ü‚°ú‚°ú‚°ú‚£º‚°Ω‚°´‚°™‚£™‚£∑‚¢ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ú‚¢ú‚¢ú‚£º‚£ø‚£±‚°±‚°π‚°ª‚£™‚£™‚£æ‚¢û‚¢è‚¢é‚£é‚£é‚¢Æ‚°∑‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚¢∑‚£Ω‚†£‚°ç‚°ù‚£ø‚£õ‚¢õ‚¢è‚¢è‚¢é‚¢é‚¢Æ‚°ü‚°ç‚°ª‚£ø‚°±‚£Ω‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ï‚¢ï‚¢ï‚°Ω‚°æ‚£Æ‚£Æ‚£™‚£™‚£™‚£∫‚£∑‚£ï‚¢ï‚¢Ω‚£æ‚£Ø‚£†‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†∑‚†∑‚£ß‚££‚£≥‚¢ü‚£ù‚¢ª‚£Ø‚£´‚£é‚£ø‚£ß‚¢©‚¢£‚°≠‚£Ω‚°ü‚£è‚¢ü‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
	VecAnim01.push_back("            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†à‚†ª‚†≥‚†ª‚¢õ‚†É‚†Å‚†Å‚†Ç‚†õ‚†ó‚†è‚†â‚¢ö‚†õ‚†ü‚†ü‚†è‚†Ä‚†Ä‚†Ä");
	
	vector<vector<string >> AnimInfo;
	AnimInfo.push_back(VecAnim01);
	Monster::animator->CreateAnimation("Idle", AnimInfo, 1, 0.15f);
}

double Boss::UseSkill()
{
	WriteManager::GetInstance()->AddLine(FMessageParam(LAYOUT_TYPE::STORY, GetName() + "Í∞Ä Ïä§ÌÇ¨ÏùÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§!!!!", true, 0, TEXT_COLOR_TYPE::RED_INENSITY));
	return GetDamage() * GetSkillDamage();
}

void Boss::Attack()
{
	//Ïä§ÌÇ¨ Ïì∏ÌôïÎ•†
	int skillProbability = 10;
	RandomManager::GetInstance()->setRange(0, 100);
	double Trigger = double(playerLevel * RandomManager::GetInstance()->getRandom<int>());

	//Ïä§ÌÇ¨ÏùÑ Ïì∞Î©¥
	if (Trigger < skillProbability) {
		double	damage = UseSkill() - Player::getInstance()->GetDefense();
		int		probability = Player::getInstance()->GetEvasion();
		int		trigger = rand() % 100;
		if (probability < trigger) {
			Player::getInstance()->GetAttack(damage);
			WriteManager::GetInstance()->AddLine(FMessageParam(LAYOUT_TYPE::STORY, "Ïä§ÌÇ¨ Í≥µÍ≤© ÌûàÌä∏!", true, 0, TEXT_COLOR_TYPE::RED_INENSITY));
			WriteManager::GetInstance()->AddLine(FMessageParam(LAYOUT_TYPE::STORY, "Îç∞ÎØ∏ÏßÄ " + to_string(int(damage)) + "Î∞õÏïòÏäµÎãàÎã§!!!.", true, 0, TEXT_COLOR_TYPE::RED));
		}
		else {
			WriteManager::GetInstance()->AddLine(FMessageParam(LAYOUT_TYPE::STORY, "Ï†ÅÏùò Ïä§ÌÇ¨ Í≥µÍ≤©ÏùÑ ÌöåÌîºÌñàÏäµÎãàÎã§.", true, 0, TEXT_COLOR_TYPE::RED_INENSITY));
		}
	}
	//Ïä§ÌÇ¨ÏùÑ ÏïÑÎãà Ïì∞Î©¥
	else {
		double	damage = GetDamage() - Player::getInstance()->GetDefense();
		int		probability = Player::getInstance()->GetEvasion();
		int		trigger = rand() % 100;
		if (probability < trigger) {
			Player::getInstance()->GetAttack(damage);
			WriteManager::GetInstance()->AddLine(FMessageParam(LAYOUT_TYPE::STORY, "ÏùºÎ∞ò Í≥µÍ≤© ÌûàÌä∏! ", true, 0, TEXT_COLOR_TYPE::RED_INENSITY));
			WriteManager::GetInstance()->AddLine(FMessageParam(LAYOUT_TYPE::STORY, "Îç∞ÎØ∏ÏßÄ " + to_string(int(damage)) + "Î∞õÏïòÏäµÎãàÎã§!.", true, 0, TEXT_COLOR_TYPE::RED));
		}
		else { WriteManager::GetInstance()->AddLine(FMessageParam(LAYOUT_TYPE::STORY, "Ï†ÅÏùò ÏùºÎ∞ò Í≥µÍ≤©ÏùÑ ÌöåÌîºÌñàÏäµÎãàÎã§.", true, 0, TEXT_COLOR_TYPE::RED_INENSITY)); }
	}
}

void Boss::GetAttack()
{
	double damage = Player::getInstance()->GetDamage() - GetDefense();
	SetCurrentHP(GetCurrentHP() - damage);
	if (GetCurrentHP() <= 0) {
		SetCurrentHP(0);
	}
}

void Boss::DropItem() {
	for (const auto& item : dropItems) {
		RandomManager::GetInstance()->setRange(0, 100);  // 0.0 ~ 1.0 ÏÇ¨Ïù¥Ïùò ÎûúÎç§ Í∞í
		double randomChance = RandomManager::GetInstance()->getRandom<double>();
		if (randomChance <= item.second) {  // ÌôïÎ•†Ïóê ÎßûÎäî ÏïÑÏù¥ÌÖú ÎìúÎ°≠
			if (item.first == HEALTH_POTION) {
				WriteManager::GetInstance()->AddLine(FMessageParam(LAYOUT_TYPE::STORY, "Ï≤¥Î†• Ìè¨ÏÖòÏù¥ ÎìúÎûçÎêòÏóàÏäµÎãàÎã§.", true, 0, TEXT_COLOR_TYPE::GREEN));
				Player::getInstance()->AddItemToInventory(HEALTH_POTION);
			}
			else if (item.first == POWER_POTION) {
				WriteManager::GetInstance()->AddLine(FMessageParam(LAYOUT_TYPE::STORY, "ÌååÏõå Ìè¨ÏÖòÏù¥ ÎìúÎûçÎêòÏóàÏäµÎãàÎã§.", true, 0, TEXT_COLOR_TYPE::GREEN));
				Player::getInstance()->AddItemToInventory(POWER_POTION);
			}
		}
	}
}


bool Boss::is_Die()
{
	if (GetCurrentHP() <= 0) {
		WriteManager::GetInstance()->AddLine(FMessageParam(LAYOUT_TYPE::STORY, "ÎãπÏã†Ïù¥" + GetName() + "Î•º Ïì∞Îü¨Ìä∏Î†∏ÏäµÎãàÎã§!", true, 0, TEXT_COLOR_TYPE::BLUE));
		DropItem();
		bDead = true;
		return bDead;
	}
	return bDead;
}




//---------------------------------
//           GetÌï®Ïàò
//---------------------------------
const string Boss::GetName()
{
	return BossStat.name;
}
const double Boss::GetCurrentHP()
{
	return BossStat.currentHp;
}
const double Boss::GetMaxHP()
{
	return BossStat.maxHp;
}
const double Boss::GetDropRate()
{
	return BossStat.dropRate;
}

const bool Boss::GetbDead()
{
	return bDead;
}

const int Boss::GetCoin()
{
	return BossStat.coin;
}
const int Boss::GetDefense()
{
	return BossStat.defense;
}
const int Boss::GetExp()
{
	return BossStat.exp;
}
const int Boss::GetEvasion()
{
	return BossStat.evasion;
}

const double Boss::GetSkillDamage()
{
	return BossStat.skillDamage;
}

const double Boss::GetDamage()
{
	return BossStat.damage;
}
//-----------------------------//
//          SetÌï®Ïàò            //
//-----------------------------//

void Boss::SetCurrentHP(double hp)
{
	BossStat.currentHp = hp;
}



